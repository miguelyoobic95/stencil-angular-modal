/*
*
*  Responsive attributes
*
*  References:
*  1) https://scotch.io/tutorials/a-visual-guide-to-css3-flexbox-properties#flex
*  2) https://css-tricks.com/almanac/properties/f/flex/
*  3) https://css-tricks.com/snippets/css/a-guide-to-flexbox/
*  4) https://github.com/philipwalton/flexbugs#3-min-height-on-a-flex-container-wont-apply-to-its-flex-items
*  5) http://godban.com.ua/projects/flexgrid
*
*/

// Layout
// ------------------------------
$baseline-grid: 8px !default;
$layout-gutter-width: ($baseline-grid * 2) !default;
$layout-breakpoint-xs: 600px !default;
$layout-breakpoint-sm: 960px !default;
$layout-breakpoint-md: 1280px !default;
$layout-breakpoint-lg: 1920px !default;
@-moz-document url-prefix() {
    [attr-layout-fill] {
        margin: 0;
        width: 100%;
        min-height: 100%;
        height: 100%;
    }
}

@mixin flex-order-for-name($sizes:null) {
    @if $sizes==null {
        $sizes: '';
        [attr-flex-order] {
            order: 0;
        }
    }
    @for $i from -20 through 20 {
        $order: '';
        $suffix: '';
        @each $s in $sizes {
            @if $s !='' {
                $suffix: '-#{$s}="#{$i}"';
            }
            @else {
                $suffix: '="#{$i}"';
            }
            $order: '[attr-flex-order#{$suffix}]';
        }
        #{$order} {
            order: #{$i};
        }
    }
}

@mixin offset-for-name($sizes:null) {
    @if $sizes==null {
        $sizes: '';
    }
    @for $i from 0 through 19 {
        $offsets: '';
        $suffix: '';
        @each $s in $sizes {
            @if $s !='' {
                $suffix: '-#{$s}="#{$i * 5}"';
            }
            @else {
                $suffix: '="#{$i * 5}"';
            }
            $offsets: $offsets+'[attr-flex-offset#{$suffix}], ';
        }
        #{$offsets} {
            margin-left: #{$i * 5 + '%'};
        }
    }
    @each $i in 33 {
        $offsets: '';
        $suffix: '';
        @each $s in $sizes {
            @if $s !='' {
                $suffix: '-#{$s}="#{$i}"';
            }
            @else {
                $suffix: '="#{$i}"';
            }
            $offsets: '[attr-flex-offset#{$suffix}], ';
        }
        #{$offsets} {
            margin-left: calc(100% / 3);
        }
    }
    @each $i in 66 {
        $offsets: '';
        $suffix: '';
        @each $s in $sizes {
            @if $s !='' {
                $suffix: '-#{$s}="#{$i}"';
            }
            @else {
                $suffix: '="#{$i}"';
            }
            $offsets: '[attr-flex-offset#{$suffix}]';
        }
        #{$offsets} {
            margin-left: calc(200% / 3);
        }
    }
}

@mixin layout-for-name($name: null) {
    @if $name==null {
        $name: '';
    }
    @if $name !='' {
        $name: '-#{$name}';
    }
    [attr-layout#{$name}],
    [attr-layout#{$name}="column"],
    [attr-layout#{$name}="row"] {
        box-sizing: border-box;
        display: -webkit-box;
        display: -webkit-flex;
        display: -moz-box;
        display: -ms-flexbox;
        display: flex;
    }
    [attr-layout#{$name}="column"] {
        flex-direction: column;
    }
    [attr-layout#{$name}="row"] {
        flex-direction: row;
    }
}

@mixin flex-properties-for-name($name: null) {
    $flexName: 'flex';
    @if $name !=null {
        $flexName: 'flex-#{$name}';
        $name: '-#{$name}';
    }
    @else {
        $name: '';
    }
    [attr-#{$flexName}] {
        flex: 1;
        box-sizing: border-box;
    } // === flex: 1 1 0%;
    // IE mediaQuery hack for 8,9,10 to set the flex-basis properly for 'flex' values
    // Details:
    // Do not use unitless flex-basis values in the flex shorthand because IE 10-11 will error.
    // Also use 0% instead of 0px since minifiers will often convert 0px to 0 (which is unitless and will have the same problem).
    // Safari, however, fails with flex-basis : 0% and requires flex-basis : 0px
    @media screen\0 {
        [attr-#{$flexName}] {
            flex: 1 1 0%;
        }
    }
    [attr-#{$flexName}-grow] {
        flex: 1 1 100%;
        box-sizing: border-box;
    }
    [attr-#{$flexName}-initial] {
        flex: 0 1 auto;
        box-sizing: border-box;
    }
    [attr-#{$flexName}-auto] {
        flex: 1 1 auto;
        box-sizing: border-box;
    }
    [attr-#{$flexName}-none] {
        flex: 0 0 auto;
        box-sizing: border-box;
    }
    [attr-#{$flexName}-noshrink] {
        flex: 1 0 auto;
        box-sizing: border-box;
    }
    [attr-#{$flexName}-nogrow] {
        flex: 0 1 auto;
        box-sizing: border-box;
    } // (1-20) * 5 = 0-100%
    @for $i from 0 through 20 {
        $value: #{$i * 5 + '%'};
        [attr-#{$flexName}="#{$i * 5}"] {
            flex: 1 1 #{$value};
            max-width: #{$value};
            max-height: 100%;
            box-sizing: border-box;
        }
        [attr-layout="row"]>[attr-#{$flexName}="#{$i * 5}"],
        [attr-layout#{$name}="row"]>[attr-#{$flexName}="#{$i * 5}"] {
            flex: 1 1 #{$value};
            max-width: #{$value};
            max-height: 100%;
            box-sizing: border-box;
        }
        [attr-layout="column"]>[attr-#{$flexName}="#{$i * 5}"],
        [attr-layout#{$name}="column"]>[attr-#{$flexName}="#{$i * 5}"] {
            flex: 1 1 #{$value};
            max-width: 100%;
            max-height: #{$value};
            box-sizing: border-box;
        }
    }
    [attr-layout="row"],
    [attr-layout#{$name}="row"] {
        >[attr-#{$flexName}="33"],
        >[attr-#{$flexName}="33"] {
            flex: 1 1 33%;
            max-width: calc(100% / 3);
            max-height: 100%;
            box-sizing: border-box;
        }
        >[attr-#{$flexName}="34"],
        >[attr-#{$flexName}="34"] {
            flex: 1 1 34%;
            max-width: 34%;
            max-height: 100%;
            box-sizing: border-box;
        }
        >[attr-#{$flexName}="66"],
        >[attr-#{$flexName}="66"] {
            flex: 1 1 66%;
            max-width: calc(200% / 3);
            max-height: 100%;
            box-sizing: border-box;
        }
        >[attr-#{$flexName}="67"],
        >[attr-#{$flexName}="67"] {
            flex: 1 1 67%;
            max-width: 67%;
            max-height: 100%;
            box-sizing: border-box;
        }
    }
    [attr-layout="column"],
    [attr-layout#{$name}="column"] {
        >[attr-#{$flexName}="33"],
        >[attr-#{$flexName}="33"] {
            flex: 1 1 33%;
            max-width: 100%;
            max-height: calc(100% / 3);
            box-sizing: border-box;
        }
        >[attr-#{$flexName}="34"],
        >[attr-#{$flexName}="34"] {
            flex: 1 1 34%;
            max-width: 100%;
            max-height: 34%;
            box-sizing: border-box;
        }
        >[attr-#{$flexName}="66"],
        >[attr-#{$flexName}="66"] {
            flex: 1 1 66%;
            max-width: 100%;
            max-height: calc(200% / 3);
            box-sizing: border-box;
        }
        >[attr-#{$flexName}="67"],
        >[attr-#{$flexName}="67"] {
            flex: 1 1 67%;
            max-width: 100%;
            max-height: 67%;
            box-sizing: border-box;
        }
    }
}

@mixin layout-align-for-name($suffix: null) {
    // Alignment attributes for layout containers' children
    // Arrange on the Main Axis
    // center, start, end, space-between, space-around
    // flex-start is the default for justify-content
    // ------------------------------
    $name: 'layout-align';
    @if $suffix !=null {
        $name: 'layout-align-#{$suffix}';
    }
    [attr-#{$name}],
    [attr-#{$name}="start stretch"] // defaults
    {
        justify-content: flex-start;
        align-content: stretch;
        align-items: stretch;
    } // Main Axis Center
    [attr-#{$name}="start"],
    [attr-#{$name}="start start"],
    [attr-#{$name}="start center"],
    [attr-#{$name}="start end"],
    [attr-#{$name}="start stretch"] {
        justify-content: start;
    } // Main Axis Center
    [attr-#{$name}="center"],
    [attr-#{$name}="center start"],
    [attr-#{$name}="center center"],
    [attr-#{$name}="center end"],
    [attr-#{$name}="center stretch"] {
        justify-content: center;
    } // Main Axis End
    [attr-#{$name}="end"], //stretch
    [attr-#{$name}="end center"],
    [attr-#{$name}="end start"],
    [attr-#{$name}="end end"],
    [attr-#{$name}="end stretch"] {
        justify-content: flex-end;
    } // Main Axis Space Around
    [attr-#{$name}="space-around"], //stretch
    [attr-#{$name}="space-around center"],
    [attr-#{$name}="space-around start"],
    [attr-#{$name}="space-around end"],
    [attr-#{$name}="space-around stretch"] {
        justify-content: space-around;
    } // Main Axis Space Between
    [attr-#{$name}="space-between"], //stretch
    [attr-#{$name}="space-between center"],
    [attr-#{$name}="space-between start"],
    [attr-#{$name}="space-between end"],
    [attr-#{$name}="space-between stretch"] {
        justify-content: space-between;
    } // Arrange on the Cross Axis
    // center, start, end
    // stretch is the default for align-items
    // ------------------------------
    // Cross Axis Start
    [attr-#{$name}="start start"],
    [attr-#{$name}="center start"],
    [attr-#{$name}="end start"],
    [attr-#{$name}="space-between start"],
    [attr-#{$name}="space-around start"] {
        align-items: flex-start;
        align-content: flex-start;
    } // Cross Axis Center
    [attr-#{$name}="start center"],
    [attr-#{$name}="center center"],
    [attr-#{$name}="end center"],
    [attr-#{$name}="space-between center"],
    [attr-#{$name}="space-around center"] {
        align-items: center;
        align-content: center;
        max-width: 100%;
    } // Cross Axis Center IE overflow fix
    [attr-#{$name}="start center"]>*,
    [attr-#{$name}="center center"]>*,
    [attr-#{$name}="end center"]>*,
    [attr-#{$name}="space-between center"]>*,
    [attr-#{$name}="space-around center"]>* {
        max-width: 100%;
        box-sizing: border-box;
    } // Cross Axis End
    [attr-#{$name}="start end"],
    [attr-#{$name}="center end"],
    [attr-#{$name}="end end"],
    [attr-#{$name}="space-between end"],
    [attr-#{$name}="space-around end"] {
        align-items: flex-end;
        align-content: flex-end;
    } // Cross Axis  stretch
    [attr-#{$name}="start stretch"],
    [attr-#{$name}="center stretch"],
    [attr-#{$name}="end stretch"],
    [attr-#{$name}="space-between stretch"],
    [attr-#{$name}="space-around stretch"] {
        align-items: stretch;
        align-content: stretch;
    }
}

@mixin layout-padding-margin() {
    [attr-layout-padding]>[attr-flex-sm],
    [attr-layout-padding]>[attr-flex-lt-md] {
        padding: $layout-gutter-width / 4;
    }
    [attr-layout-padding],
    [attr-layout-padding]>[attr-flex],
    [attr-layout-padding]>[attr-flex-gt-sm],
    [attr-layout-padding]>[attr-flex-md],
    [attr-layout-padding]>[attr-flex-lt-lg] {
        padding: $layout-gutter-width / 2;
    }
    [attr-layout-padding]>[attr-flex-gt-md],
    [attr-layout-padding]>[attr-flex-lg] {
        padding: $layout-gutter-width / 1;
    }
    [attr-layout-margin]>[attr-flex-sm],
    [attr-layout-margin]>[attr-flex-lt-md] {
        margin: $layout-gutter-width / 4;
    }
    [attr-layout-margin],
    [attr-layout-margin]>[attr-flex],
    [attr-layout-margin]>[attr-flex-gt-sm],
    [attr-layout-margin]>[attr-flex-md],
    [attr-layout-margin]>[attr-flex-lt-lg] {
        margin: $layout-gutter-width / 2;
    }
    [attr-layout-margin]>[attr-flex-gt-md],
    [attr-layout-margin]>[attr-flex-lg] {
        margin: $layout-gutter-width / 1;
    }
    [attr-layout-wrap] {
        flex-wrap: wrap;
    }
    [attr-layout-nowrap] {
        flex-wrap: nowrap;
    }
    [attr-layout-fill] {
        margin: 0;
        width: 100%;
        min-height: 100%;
        height: 100%;
    }
}

@mixin layouts_for_breakpoint($name:null) {
    @include flex-order-for-name($name);
    @include offset-for-name($name);
    @include layout-align-for-name($name);
    @include flex-properties-for-name($name);
    @include layout-for-name($name);
}


/*
 *  Apply Mixins to create Layout/Flexbox styles
 *
 */

@include layouts_for_breakpoint();
@include layout-padding-margin();

/**
 * `hide-gt-sm show-gt-lg` should hide from 600px to 1200px
 * `show-md hide-gt-sm` should show from 0px to 960px and hide at >960px
 * `hide-gt-md show-gt-sm` should show everywhere (show overrides hide)`
 *
 *  hide means hide everywhere
 *  Sizes:
 *         $layout-breakpoint-xs:     600px !default;
 *         $layout-breakpoint-sm:     960px !default;
 *         $layout-breakpoint-md:     1280px !default;
 *         $layout-breakpoint-lg:     1920px !default;
 */

@media (max-width: $layout-breakpoint-xs - 1) {
    // Xtra-SMALL  SCREEN
    [attr-hide-xs],
    [attr-hide] {
        &:not([attr-show-xs]):not([attr-show]) {
            display: none;
        }
    }
    @include layouts_for_breakpoint(xs);
}

@media (min-width: $layout-breakpoint-xs) {
    // BIGGER THAN Xtra-SMALL SCREEN
    @include layouts_for_breakpoint(gt-xs);
}

@media (min-width: $layout-breakpoint-xs) and (max-width: $layout-breakpoint-sm - 1) {
    // SMALL SCREEN
    [attr-hide-sm],
    [attr-hide-gt-xs] {
        &:not([attr-show-gt-xs]):not([attr-show-sm]):not([attr-show]) {
            display: none;
        }
    }
    [attr-hide-sm]:not([attr-show-sm]):not([attr-show]) {
        display: none;
    }
    @include layouts_for_breakpoint(sm);
}

@media (min-width: $layout-breakpoint-sm) {
    // BIGGER THAN SMALL SCREEN
    @include layouts_for_breakpoint(gt-sm);
}

@media (min-width: $layout-breakpoint-sm) and (max-width: $layout-breakpoint-md - 1) {
    // MEDIUM SCREEN
    [attr-hide],
    [attr-hide-gt-xs],
    [attr-hide-gt-sm] {
        &:not([attr-show-gt-xs]):not([attr-show-gt-sm]):not([attr-show-md]):not([attr-show]) {
            display: none;
        }
    }
    [attr-hide-md]:not([attr-show-md]):not([attr-show]) {
        display: none;
    }
    @include layouts_for_breakpoint(md);
}

@media (min-width: $layout-breakpoint-md) {
    // BIGGER THAN MEDIUM SCREEN
    @include layouts_for_breakpoint(gt-md);
}

@media (min-width: $layout-breakpoint-md) and (max-width: $layout-breakpoint-lg - 1) {
    // LARGE SCREEN
    [attr-hide],
    [attr-hide-gt-xs],
    [attr-hide-gt-sm],
    [attr-hide-gt-md] {
        &:not([attr-show-gt-xs]):not([attr-show-gt-sm]):not([attr-show-gt-md]):not([attr-show-lg]):not([attr-show]) {
            display: none;
        }
    }
    [attr-hide-lg]:not([attr-show-lg]):not([attr-show]) {
        display: none;
    }
    @include layouts_for_breakpoint(lg);
}

@media (min-width: $layout-breakpoint-lg) {
    // BIGGER THAN LARGE SCREEN
    @include layouts_for_breakpoint(gt-lg);
    @include layouts_for_breakpoint(xl); // BIGGER THAN LARGE SCREEN
    [attr-hide],
    [attr-hide-gt-xs],
    [attr-hide-gt-sm],
    [attr-hide-gt-md],
    [attr-hide-gt-lg] {
        &:not([attr-show-gt-xs]):not([attr-show-gt-sm]):not([attr-show-gt-md]):not([attr-show-gt-lg]):not([attr-show-xl]):not([attr-show]) {
            display: none;
        }
    }
    [attr-hide-xl]:not([attr-show-xl]):not([attr-show-gt-lg]):not([attr-show]) {
        display: none;
    }
}